Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 records
ii. Business table = 10000 records
iii. Category table = 10000 records
iv. Checkin table = 10000 records
v. elite_years table = 10000 records
vi. friend table = 10000 records
vii. hours table = 10000 records
viii. photo table = 10000 records
ix. review table = 10000 records
x. tip table = 10000 records
xi. user table = 10000 records
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records
ii. Hours = business_id : 1562 distinct records
iii. Category = business_id : 2643 distinct records
iv. Attribute = business_id : 1115 distinct records
v. Review = 10000 distinct records
vi. Checkin = business_id : 493 distinct records
vii. Photo = 10000 distinct records
viii. Tip = user_id : 537 distinct records
ix. User = 10000 distinct records
x. Friend = user_id : 11 distinct records
xi. Elite_years = user_id : 2780 distinct records

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	select * from user where useful is null or
                          name is null or
                          review_count is null or
                          yelping_since is null or
                          useful is null or
                          funny is null or
                          cool is null or
                          fans is null or
                          average_stars is null or
                          compliment_hot is null or
                          compliment_more is null or
                          compliment_profile is null or
                          compliment_cute is null or
                          compliment_list is null or
                          compliment_note is null or
                          compliment_plain is null or
                          compliment_cool is null or 
                          compliment_funny is null or
                          compliment_writer is null or
                          compliment_photos is null;
						  
						  or
	
	select sum(case when id is null then 1 else 0 end) as id,
        sum(case when name is null then 1 else 0 end) as name,
        sum(case when review_count is null then 1 else 0 end) as review_count,
        sum(case when yelping_since is null then 1 else 0 end) as yelping_since,
        sum(case when useful is null then 1 else 0 end) as useful,
        sum(case when funny is null then 1 else 0 end) as funny,
        sum(case when cool is null then 1 else 0 end) as cool,
        sum(case when fans is null then 1 else 0 end) as fans,
        sum(case when average_stars is null then 1 else 0 end) as average_stars,
        sum(case when compliment_hot is null then 1 else 0 end) as compliment_hot,
        sum(case when compliment_more is null then 1 else 0 end) as compliment_more,
        sum(case when compliment_profile is null then 1 else 0 end) as compliment_profile,
        sum(case when compliment_cute is null then 1 else 0 end) as compliment_cute,
        sum(case when compliment_list is null then 1 else 0 end) as compliment_list,
        sum(case when compliment_note is null then 1 else 0 end) as compliment_note,
        sum(case when compliment_plain is null then 1 else 0 end) as compliment_plain,
        sum(case when compliment_cool is null then 1 else 0 end) as  compliment_cool,
        sum(case when compliment_funny is null then 1 else 0 end) as compliment_funny,
        sum(case when compliment_writer is null then 1 else 0 end) as compliment_writer,
        sum(case when compliment_photos is null then 1 else 0 end) as compliment_photos
        from user;
	
	+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
	| id | name | review_count | yelping_since | useful | funny | cool | fans | average_stars | compliment_hot | compliment_more | compliment_profile | compliment_cute | compliment_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | compliment_photos |
	+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
	|  0 |    0 |            0 |             0 |      0 |     0 |    0 |    0 |             0 |              0 |               0 |                  0 |               0 |               0 |               0 |                0 |               0 |                0 |                 0 |                 0 |
	+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1	max: 5	avg: 3.7082
		
		select min(stars), max(stars), avg(stars) from review;
		
		+------------+------------+------------+
		| min(stars) | max(stars) | avg(stars) |
		+------------+------------+------------+
		|          1 |          5 |     3.7082 |
		+------------+------------+------------+
		
	
	ii. Table: Business, Column: Stars
	
		min: 1	max: 5	avg: 3.6549
		
		select min(stars), max(stars), avg(stars) from business;
		
		+------------+------------+------------+
		| min(stars) | max(stars) | avg(stars) |
		+------------+------------+------------+
		|        1.0 |        5.0 |     3.6549 |
		+------------+------------+------------+
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0	max: 2	avg: 0.0144
		
		select min(likes), max(likes), avg(likes) from tip;
		
		+------------+------------+------------+
		| min(likes) | max(likes) | avg(likes) |
		+------------+------------+------------+
		|          0 |          2 |     0.0144 |
		+------------+------------+------------+
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1	max: 53	avg: 1.9414
		
		select min(count), max(count), avg(count) from checkin;
		
		+------------+------------+------------+
		| min(count) | max(count) | avg(count) |
		+------------+------------+------------+
		|          1 |         53 |     1.9414 |
		+------------+------------+------------+
		
	
	v. Table: User, Column: Review_count
	
		min: 0	max: 2000	avg: 24.2995
		
		select min(review_count), max(review_count), avg(review_count) from user;
		
		+-------------------+-------------------+-------------------+
		| min(review_count) | max(review_count) | avg(review_count) |
		+-------------------+-------------------+-------------------+
		|                 0 |              2000 |           24.2995 |
		+-------------------+-------------------+-------------------+
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	select city,sum(review_count) from business group by city order by sum(review_count) desc;
	
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------------+
	| city            | sum(review_count) |
	+-----------------+-------------------+
	| Las Vegas       |             82854 |
	| Phoenix         |             34503 |
	| Toronto         |             24113 |
	| Scottsdale      |             20614 |
	| Charlotte       |             12523 |
	| Henderson       |             10871 |
	| Tempe           |             10504 |
	| Pittsburgh      |              9798 |
	| Montr√©al        |              9448 |
	| Chandler        |              8112 |
	| Mesa            |              6875 |
	| Gilbert         |              6380 |
	| Cleveland       |              5593 |
	| Madison         |              5265 |
	| Glendale        |              4406 |
	| Mississauga     |              3814 |
	| Edinburgh       |              2792 |
	| Peoria          |              2624 |
	| North Las Vegas |              2438 |
	| Markham         |              2352 |
	| Champaign       |              2029 |
	| Stuttgart       |              1849 |
	| Surprise        |              1520 |
	| Lakewood        |              1465 |
	| Goodyear        |              1155 |
	+-----------------+-------------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 

select stars,count(stars) from business where city = 'Avon' group by stars;


Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):

+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|    0	|			 0 |
|   1.0	|			 0 |
|	1.5 |            1 |
|	2.0	|			 0 |
|   2.5 |            2 |
|	3.0	|			 0 |
|	3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+


ii. Beachwood

SQL code used to arrive at answer:

select stars,count(stars) from business where city = 'Beachwood' group by stars;


Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):

+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|	 0	|            0 |
|	1.0 |			 0 |
|	1.5 | 			 0 |
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select review_count, name from user order by review_count desc limit 3;
	
		
	Copy and Paste the Result Below:
	
	+--------------+--------+
	| review_count | name   |
	+--------------+--------+
	|         2000 | Gerald |
	|         1629 | Sara   |
	|         1339 | Yuri   |
	+--------------+--------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	No, posing reviews does not correlate with more fans. As you can below, the review_count for maximum fans(503) is 609 but the review_count for 253 fans is the maximum at 2000.
	The review_count fluctuates irrespective of the number of fans.
	
	+--------------+------+-----------+
	| review_count | fans | name      |
	+--------------+------+-----------+
	|          609 |  503 | Amy       |
	|          968 |  497 | Mimi      |
	|         1153 |  311 | Harald    |
	|         2000 |  253 | Gerald    |
	|          930 |  173 | Christine |
	|          813 |  159 | Lisa      |
	|          377 |  133 | Cat       |
	|         1215 |  126 | William   |
	|          862 |  124 | Fran      |
	|          834 |  120 | Lissa     |
	|          861 |  115 | Mark      |
	|          408 |  111 | Tiffany   |
	|          255 |  105 | bernice   |
	|         1039 |  104 | Roanna    |
	|          694 |  101 | Angela    |
	|         1246 |  101 | .Hon      |
	|          307 |   96 | Ben       |
	|          584 |   89 | Linda     |
	|          842 |   85 | Christina |
	|          220 |   84 | Jessica   |
	|          408 |   81 | Greg      |
	|          178 |   80 | Nieves    |
	|          754 |   78 | Sui       |
	|         1339 |   76 | Yuri      |
	|          161 |   73 | Nicole    |
	+--------------+------+-----------+
	(Output limit exceeded, 25 of 10000 total rows shown)
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There were 1780 reviews with the word 'love' compared to 232 reviews with the word 'hate'.

	
	SQL code used to arrive at answer: 
	
	love:
	
	select * from review where lower(text) like '%love%';
	
	(Output limit exceeded, 25 of 1780 total rows shown)
	
	hate:
	
	select * from review where lower(text) like '%hate%';
	
	(Output limit exceeded, 25 of 232 total rows shown)
	

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select name, fans from user  order by fans desc limit 10;
	
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours? 
	
	Yes
	
	city = 'Las Vegas', category = 'Restaurants'
	
select name,neighborhood, address, city, state, postal_code, latitude, longitude, stars, review_count, hours from business b, category c, hours h where 
city = 'Las Vegas' and c.business_id = b.id and c.business_id = h.business_id 
and  category = 'Restaurants' and stars between 2.0 and 3.0 order by stars;

select name,neighborhood, address, city, state, postal_code, latitude, longitude, stars, review_count, hours from business b, category c, hours h where 
city = 'Las Vegas' and c.business_id = b.id and c.business_id = h.business_id 
and  category = 'Restaurants'
and stars between 4.0 and 5.0 order by stars;


ii. Do the two groups you chose to analyze have a different number of reviews?
	
	Yes
    
	city = 'Las Vegas', category = 'Restaurants'
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

	The restaurant (Wingstop) present in the postal_code 89103 has the least stars (3.0) between the two group and lesser review count while the restaurants (Jacques Cafe, Big Wong Restaurant)
	located at the postal code 89134 and 89146 has better rating (4.0 stars) and more review. The restaurant at 89103 has lesser customers even when it is operating for longer time.
	
	select name,neighborhood,address,city, state, postal_code, latitude, longitude, stars,review_count, hours   from business b, category c, hours h where 
	city = 'Las Vegas' and c.business_id = b.id and c.business_id = h.business_id 
	and  category = 'Restaurants' order by stars;
	
	+---------------------+--------------+---------------------------------+-----------+-------+-------------+----------+-----------+-------+--------------+-----------------------+
	| name                | neighborhood | address                         | city      | state | postal_code | latitude | longitude | stars | review_count | hours                 |
	+---------------------+--------------+---------------------------------+-----------+-------+-------------+----------+-----------+-------+--------------+-----------------------+
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Monday|11:00-0:00     |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Tuesday|11:00-0:00    |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Friday|11:00-0:00     |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Wednesday|11:00-0:00  |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Thursday|11:00-0:00   |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Sunday|11:00-0:00     |
	| Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |  36.1003 |   -115.21 |   3.0 |          123 | Saturday|11:00-0:00   |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Monday|11:00-20:00    |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Tuesday|11:00-20:00   |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Friday|11:00-20:00    |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Wednesday|11:00-20:00 |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Thursday|11:00-20:00  |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Sunday|8:00-14:00     |
	| Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |  36.1933 |  -115.304 |   4.0 |          168 | Saturday|11:00-20:00  |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Monday|10:00-23:00    |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Tuesday|10:00-23:00   |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Friday|10:00-23:00    |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Wednesday|10:00-23:00 |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Thursday|10:00-23:00  |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Sunday|10:00-23:00    |
	| Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |  36.1267 |   -115.21 |   4.0 |          768 | Saturday|10:00-23:00  |
	+---------------------+--------------+---------------------------------+-----------+-------+-------------+----------+-----------+-------+--------------+-----------------------+

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
	
	The restaurants that are closed(is_open = 0) tend to have lesser reviews with maximum review_count 168. 
	Meanwhile the restaurants that are opened(is_open = 1) tend to have have higher number(768) of reviews and customers.
         
         
ii. Difference 2:
    
	The restaurants that are closed(is_open = 0) tend to have shorter operating hours with the restaurant Jacques Cafe being an exception having an longer operating hours.
	The restaurants that are opened(is_open = 1) tend to have longer operating hours.
         
SQL code used for analysis:

	select is_open, name,neighborhood,address,city, state, postal_code, latitude, longitude, stars,review_count, hours   from business b, category c, hours h where 
	city = 'Las Vegas' and c.business_id = b.id and c.business_id = h.business_id 
	and is_open = 0 ;
	
	select is_open, name,neighborhood,address,city, state, postal_code, latitude, longitude, stars,review_count, hours   from business b, category c, hours h where 
	city = 'Las Vegas' and c.business_id = b.id and c.business_id = h.business_id 
	and is_open = 1 ;
	
 
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

	I analyzed if the various attributes of business such as Ambience, BikeParking, DriveThru, OutdoorSeating, Free WiFi has an impact on the customer ratings and reviews of the business.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

	The type of data I need for this analysis are attribute details like Ambience, BikeParking, ratings, review_count for different business. 
	The reason for choosing this data is to understand the impact these amenities has on the customer ratings as customers prefer to have nearby parking, outdoor seating in the restaurants.
	Improving these things would increase customer satisfaction which would increase the rating and lead to business growth.
                           
                  
iii. Output of your finished dataset:
	
	select  b.name, stars, review_count,
    (select case value when 'free' then 'free'
                       when 'paid' then  'paid' 
                       else 'no' end) as WiFi
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'WiFi' 
	order by stars desc;
	
	+----------------------------------------+-------+--------------+------+
	| name                                   | stars | review_count | WiFi |
	+----------------------------------------+-------+--------------+------+
	| Sushi Osaka                            |   4.5 |            8 | free |
	| Charlie D's Catfish & Chicken          |   4.5 |            7 | no   |
	| Koko Bakery                            |   4.0 |          162 | free |
	| The Cider Mill                         |   4.0 |           91 | no   |
	| Masamune Japanese Restaurant           |   4.0 |           61 | no   |
	| Hermanos Mexican Grill                 |   4.0 |           69 | no   |
	| Edulis                                 |   4.0 |           89 | no   |
	| Bootleggers Modern American Smokehouse |   4.0 |          431 | no   |
	| Papa Murphy's                          |   4.0 |            4 | no   |
	| Five Guys                              |   3.5 |           63 | no   |
	| Thirsty Goat                           |   3.5 |           74 | free |
	| WorldMark Las Vegas - Spencer Street   |   3.5 |           19 | paid |
	| Hi Scores - Blue Diamond               |   3.5 |          105 | free |
	| Senor Taco                             |   3.5 |           83 | no   |
	| Wingstop                               |   3.0 |          123 | no   |
	| Big Smoke Burger                       |   3.0 |           47 | free |
	| Otto Onkel                             |   3.0 |           50 | no   |
	| Pizzaiolo                              |   3.0 |           34 | no   |
	| Flaming Kitchen                        |   3.0 |           25 | no   |
	| Starbucks                              |   3.0 |           52 | free |
	| P & J Hamburgers Inn                   |   3.0 |            3 | free |
	| Gallagher's                            |   3.0 |           60 | free |
	| Mad Mex - South Hills                  |   3.0 |          103 | free |
	| Mango Flats                            |   2.5 |            5 | free |
	| McDonald's                             |   2.0 |            8 | free |
	+----------------------------------------+-------+--------------+------+
	(Output limit exceeded, 25 of 26 total rows shown)
	
	select  b.name, stars, review_count,
    (select case when value like '%"romantic": false%' then 'false'
                 when value like '%"romantic": true%' then  'true'
                 else 'NA'
                 end ) as Romantic, 
    (select case when value like '%"intimate": false%' then 'false'
                 when value like '%"intimate": true%' then  'true'
                 else 'NA'
                 end ) as Intimate,
    (select case when value like '%"classy": false%' then 'false'
                 when value like '%"classy": true%' then  'true'
                 else 'NA'
                 end ) as Classy,
    (select case when value like '%"hipster": false%' then 'false'
                 when value like '%"hipster": true%' then  'true'
                 else 'NA'
                 end ) as Hipster,
    (select case when value like '%"divey": false%' then 'false'
                 when value like '%"divey": true%' then  'true'
                 else 'NA'
                 end ) as Divey,
    (select case when value like '%"touristy": false%' then 'false'
                 when value like '%"touristy": true%' then  'true'
                 else 'NA'
                 end ) as Touristy,
    (select case when value like '%"trendy": false%' then 'false'
                 when value like '%"trendy": true%' then  'true'
                 else 'NA'
                 end ) as Trendy,
    (select case when value like '%"upscale": false%' then 'false'
                 when value like '%"upscale": true%' then  'true'
                 else 'NA'
                 end ) as Upscale,
    (select case when value like '%"casual": false%' then 'false'
                 when value like '%"casual": true%' then  'true'
                 else 'NA'
                 end ) as Casual
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'Ambience' 
	order by stars desc;
	
	+----------------------------------------+-------+--------------+----------+----------+--------+---------+-------+----------+--------+---------+--------+
	| name                                   | stars | review_count | Romantic | Intimate | Classy | Hipster | Divey | Touristy | Trendy | Upscale | Casual |
	+----------------------------------------+-------+--------------+----------+----------+--------+---------+-------+----------+--------+---------+--------+
	| Charlie D's Catfish & Chicken          |   4.5 |            7 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Nabers Music, Bar & Eats               |   4.0 |           75 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| The Cider Mill                         |   4.0 |           91 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Masamune Japanese Restaurant           |   4.0 |           61 | false    | true     | false  | false   | NA    | false    | false  | false   | false  |
	| Hermanos Mexican Grill                 |   4.0 |           69 | false    | false    | false  | false   | NA    | false    | false  | false   | true   |
	| Edulis                                 |   4.0 |           89 | true     | true     | false  | false   | NA    | false    | false  | false   | false  |
	| Bootleggers Modern American Smokehouse |   4.0 |          431 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Five Guys                              |   3.5 |           63 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Subway                                 |   3.5 |            3 | false    | false    | false  | false   | false | false    | false  | false   | false  |
	| Thirsty Goat                           |   3.5 |           74 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| The Charlotte Room                     |   3.5 |           10 | false    | false    | false  | false   | NA    | false    | false  | false   | false  |
	| Hi Scores - Blue Diamond               |   3.5 |          105 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Senor Taco                             |   3.5 |           83 | false    | false    | false  | false   | false | false    | false  | false   | false  |
	| Subway                                 |   3.5 |            7 | false    | false    | false  | false   | false | false    | false  | false   | false  |
	| Wingstop                               |   3.0 |          123 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Big Smoke Burger                       |   3.0 |           47 | false    | false    | false  | false   | NA    | false    | false  | false   | true   |
	| Otto Onkel                             |   3.0 |           50 | false    | false    | false  | false   | NA    | false    | false  | false   | false  |
	| Pizzaiolo                              |   3.0 |           34 | false    | false    | false  | false   | NA    | false    | false  | false   | false  |
	| Deli 194                               |   3.0 |            4 | false    | false    | false  | false   | NA    | false    | false  | false   | false  |
	| Flaming Kitchen                        |   3.0 |           25 | false    | false    | false  | false   | NA    | false    | false  | false   | true   |
	| P & J Hamburgers Inn                   |   3.0 |            3 | false    | false    | false  | false   | NA    | false    | false  | false   | false  |
	| Gallagher's                            |   3.0 |           60 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| Mad Mex - South Hills                  |   3.0 |          103 | false    | false    | false  | false   | false | false    | false  | false   | true   |
	| The Fox & Fiddle                       |   2.5 |           35 | false    | false    | false  | false   | NA    | false    | false  | false   | true   |
	| Papa Da Vinci                          |   2.5 |           28 | false    | false    | false  | false   | true  | false    | false  | false   | false  |
	+----------------------------------------+-------+--------------+----------+----------+--------+---------+-------+----------+--------+---------+--------+
	(Output limit exceeded, 25 of 28 total rows shown)
    
	select  b.name, stars, review_count, 
        (select case value when 0 then 'yes'
        when '1' then  'no'
        else 'NA'
        end ) as BikeParking
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'BikeParking' 
	order by stars ; 
	
	+----------------------------+-------+--------------+-------------+
	| name                       | stars | review_count | BikeParking |
	+----------------------------+-------+--------------+-------------+
	| Royal Dumpling             |   1.5 |            4 | yes         |
	| Ghost Armor SS Springs     |   2.0 |            3 | no          |
	| McDonald's                 |   2.0 |            8 | no          |
	| The Fox & Fiddle           |   2.5 |           35 | no          |
	| Papa Da Vinci              |   2.5 |           28 | no          |
	| Loblaws                    |   2.5 |           10 | no          |
	| Mango Flats                |   2.5 |            5 | no          |
	| Wingstop                   |   3.0 |          123 | no          |
	| Big Smoke Burger           |   3.0 |           47 | no          |
	| Pizzaiolo                  |   3.0 |           34 | no          |
	| Flaming Kitchen            |   3.0 |           25 | no          |
	| Starbucks                  |   3.0 |           52 | no          |
	| Gallagher's                |   3.0 |           60 | no          |
	| Mad Mex - South Hills      |   3.0 |          103 | no          |
	| Five Guys                  |   3.5 |           63 | no          |
	| Subway                     |   3.5 |            3 | no          |
	| Standard Restaurant Supply |   3.5 |           15 | yes         |
	| Thirsty Goat               |   3.5 |           74 | no          |
	| Gorgeous Glo               |   3.5 |           10 | no          |
	| Hi Scores - Blue Diamond   |   3.5 |          105 | no          |
	| Dilworth Custom Framing    |   3.5 |            6 | no          |
	| Senor Taco                 |   3.5 |           83 | no          |
	| Bobs Smoke Shop            |   3.5 |            3 | no          |
	| Koko Bakery                |   4.0 |          162 | no          |
	| Nabers Music, Bar & Eats   |   4.0 |           75 | no          |
	+----------------------------+-------+--------------+-------------+
	(Output limit exceeded, 25 of 40 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:

	select  b.name, stars, review_count,
    (select case value when 'free' then 'free'
                       when 'paid' then  'paid' 
                       else 'no' end) as WiFi
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'WiFi' 
	order by stars desc;
	
	select  b.name, stars, review_count,
    (select case when value like '%"romantic": false%' then 'false'
                 when value like '%"romantic": true%' then  'true'
                 else 'NA'
                 end ) as Romantic, 
    (select case when value like '%"intimate": false%' then 'false'
                 when value like '%"intimate": true%' then  'true'
                 else 'NA'
                 end ) as Intimate,
    (select case when value like '%"classy": false%' then 'false'
                 when value like '%"classy": true%' then  'true'
                 else 'NA'
                 end ) as Classy,
    (select case when value like '%"hipster": false%' then 'false'
                 when value like '%"hipster": true%' then  'true'
                 else 'NA'
                 end ) as Hipster,
    (select case when value like '%"divey": false%' then 'false'
                 when value like '%"divey": true%' then  'true'
                 else 'NA'
                 end ) as Divey,
    (select case when value like '%"touristy": false%' then 'false'
                 when value like '%"touristy": true%' then  'true'
                 else 'NA'
                 end ) as Touristy,
    (select case when value like '%"trendy": false%' then 'false'
                 when value like '%"trendy": true%' then  'true'
                 else 'NA'
                 end ) as Trendy,
    (select case when value like '%"upscale": false%' then 'false'
                 when value like '%"upscale": true%' then  'true'
                 else 'NA'
                 end ) as Upscale,
    (select case when value like '%"casual": false%' then 'false'
                 when value like '%"casual": true%' then  'true'
                 else 'NA'
                 end ) as Casual
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'Ambience' 
	order by stars desc;
	
	select  b.name, stars, review_count, 
        (select case value when 0 then 'yes'
        when '1' then  'no'
        else 'NA'
        end ) as BikeParking
	from attribute a, business b 
	where b.id = a.business_id and a.name = 'BikeParking' 
	order by stars ; 